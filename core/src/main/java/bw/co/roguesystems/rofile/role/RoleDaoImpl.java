// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 08/14/2019 18:45:26+0100.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.rofile.role;

import bw.co.roguesystems.rofile.rfile.RFile;
import bw.co.roguesystems.rofile.rfile.vo.RFileVO;
import bw.co.roguesystems.rofile.role.vo.RoleSearchCriteria;
import bw.co.roguesystems.rofile.role.vo.RoleVO;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;


/**
 * @see Role
 */
@Repository("roleDao")
public class RoleDaoImpl
    extends RoleDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected List handleFindByCriteria(RoleSearchCriteria searchCriteria)
    {
    	CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<Role> query = builder.createQuery(Role.class);
    	Root<Role> root = query.from(Role.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if(searchCriteria.getCode() != null)
		{
			predicates.add(builder.like(root.<String>get("code"), "%" + searchCriteria.getCode().toUpperCase() + "%"));
		}
		
		if(searchCriteria.getRole() != null)
		{
			predicates.add(builder.like(root.<String>get("role"), "%" + searchCriteria.getRole() + "%"));
		}
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.asc(root.get("code")));
		TypedQuery<Role> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toRoleVO(
        Role source,
        RoleVO target)
    {
        // TODO verify behavior of toRoleVO
        super.toRoleVO(source, target);
        target.setRoleFiles(getRFileDao().toRFileVOCollection(source.getRoleFiles()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleVO toRoleVO(final Role entity)
    {
        return super.toRoleVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Role loadRoleFromRoleVO(RoleVO roleVO)
    {
        Role role = Role.Factory.newInstance();
        if(roleVO.getId() != null) {
        	role = this.load(roleVO.getId());
        }
        
        return role;
    }

    /**
     * {@inheritDoc}
     */
    public Role roleVOToEntity(RoleVO roleVO)
    {
        Role entity = this.loadRoleFromRoleVO(roleVO);
        this.roleVOToEntity(roleVO, entity, true);        
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void roleVOToEntity(
        RoleVO source,
        Role target,
        boolean copyIfNull)
    {
        // TODO verify behavior of roleVOToEntity
        super.roleVOToEntity(source, target, copyIfNull);
        
        Collection<RFile> files = new ArrayList<RFile>();
         for(RFileVO file : source.getRoleFiles())
        {
        	RFile rfile = getRFileDao().load(file.getId());
        	files.add(rfile);
        }
        target.setRoleFiles(files);
    }
}