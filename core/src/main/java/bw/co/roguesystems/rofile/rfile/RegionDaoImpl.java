// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 08/19/2019 18:27:45+0100.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.rofile.rfile;

import bw.co.roguesystems.rofile.rfile.vo.RegionSearchCriteria;
import bw.co.roguesystems.rofile.rfile.vo.RegionVO;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

/**
 * @see Region
 */
@Repository("regionDao")
public class RegionDaoImpl
    extends RegionDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Region> handleFindByCriteria(RegionSearchCriteria searchCriteria)
    {
        CriteriaBuilder builder = getSession().getCriteriaBuilder();
        CriteriaQuery<Region> query = builder.createQuery(Region.class);
        Root<Region> root = query.from(Region.class);
        List<Predicate> predicates = new ArrayList<Predicate>();
        
        if(searchCriteria.getTable() != null)
        {
        	predicates.add(builder.equal(root.<Boolean>get("table"), searchCriteria.getTable()));
        }
        
        if(searchCriteria.getText() != null)
        {
        	predicates.add(builder.like(root.<String>get("text"), searchCriteria.getText()));
        }
        
        if(searchCriteria.getFile() != null && searchCriteria.getFile().getId() != null)
        {
        	Join<Region, RFile> regionJoin = root.join("file", JoinType.INNER);
        	predicates.add(builder.equal(regionJoin.<Long>get("id"), searchCriteria.getFile().getId()));
        }
        
        if(!predicates.isEmpty())
        {
        	query.where();
        	Predicate[] pr = new Predicate[predicates.size()];
        	predicates.toArray(pr);
        	query.where(pr);        	
        }
        
        TypedQuery<Region> typedQuery = getSession().createQuery(query);
        return typedQuery.getResultList();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toRegionVO(
        Region source,
        RegionVO target)
    {
        // TODO verify behavior of toRegionVO
        super.toRegionVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegionVO toRegionVO(final Region entity)
    {
        // TODO verify behavior of toRegionVO
        return super.toRegionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Region loadRegionFromRegionVO(RegionVO regionVO)
    {
        Region region = Region.Factory.newInstance();
        
        if(regionVO != null && regionVO.getId() != null)
        {
        	region = this.load(region.getId());
        }
        
        return region;
    }

    /**
     * {@inheritDoc}
     */
    public Region regionVOToEntity(RegionVO regionVO)
    {
        // TODO verify behavior of regionVOToEntity
        Region entity = this.loadRegionFromRegionVO(regionVO);
        this.regionVOToEntity(regionVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void regionVOToEntity(
        RegionVO source,
        Region target,
        boolean copyIfNull)
    {
        // TODO verify behavior of regionVOToEntity
        super.regionVOToEntity(source, target, copyIfNull);
        
        RFile file = getRFileDao().load(source.getFile().getId());
        target.setFile(file);
    }
}