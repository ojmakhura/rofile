// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 08/19/2019 18:27:45+0100.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.rofile.rfile;

import bw.co.roguesystems.rofile.rfile.vo.RFileSearchCriteria;
import bw.co.roguesystems.rofile.rfile.vo.RFileVO;
import bw.co.roguesystems.rofile.rfile.vo.RegionVO;
import bw.co.roguesystems.rofile.role.Role;
import bw.co.roguesystems.rofile.role.vo.RoleVO;
import bw.co.roguesystems.rofile.user.User;
import bw.co.roguesystems.rofile.user.vo.UserDetailsVO;
import bw.co.roguesystems.rofile.user.vo.UserVO;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.hibernate.Hibernate;
import org.springframework.stereotype.Repository;

/**
 * @see RFile
 */
@Repository("rFileDao")
public class RFileDaoImpl
    extends RFileDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<RFile> handleFindByCriteria(RFileSearchCriteria searchCriteria)
    {
    	CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<RFile> query = builder.createQuery(RFile.class);
    	Root<RFile> root = query.from(RFile.class);
    	List<Predicate> predicates = new ArrayList<Predicate>();
    	
    	if(searchCriteria.getFilename() != null)
    	{
    		predicates.add(builder.like(root.<String>get("filename"), searchCriteria.getFilename()));
    	}
    	
    	if(searchCriteria.getText() != null)
    	{
    		predicates.add(builder.like(root.<String>get("extractedText"), searchCriteria.getText()));
    	}
    	
    	query.orderBy(builder.asc(root.get("filename")));
    	TypedQuery<RFile> typedQuery = getSession().createQuery(query);
    	
        return typedQuery.getResultList();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toRFileVO(
        RFile source,
        RFileVO target)
    {
        // TODO verify behavior of toRFileVO
        super.toRFileVO(source, target);
        // WARNING! No conversion for target.parent (can't convert source.getParent():RFile to RFileVO
        RFileVO f = new RFileVO();
        f.setAbsoluteFileName(source.getParent().getAbsoluteFileName());
        f.setId(source.getParent().getId());
        f.setFilename(source.getParent().getFilename());
        f.setFileType(source.getParent().getFileType());
        target.setParent(f);
        
        // WARNING! No conversion for target.owner (can't convert source.getOwner():bw.co.roguesystems.rofile.user.User to bw.co.roguesystems.rofile.user.vo.UserVO
        UserDetailsVO usr = new UserDetailsVO();
        usr.setId(source.getOwner().getId());
        usr.setCreatedAt(source.getOwner().getCreatedAt());
        usr.setCreatedBy(source.getOwner().getCreatedBy());
        usr.setUsername(source.getOwner().getUsername());
        usr.setFirstName(source.getOwner().getFirstName());        
        target.setOwner(usr);
        
        // WARNING! No conversion for target.sharedWithRoles (can't convert source.getSharedWithRoles():bw.co.roguesystems.rofile.role.Role to bw.co.roguesystems.rofile.role.vo.RoleVO
        target.setSharedWithRoles(new ArrayList<RoleVO>());
        for(Role role : source.getSharedWithRoles())
        {
        	RoleVO rv = new RoleVO();
        	rv.setCode(role.getCode());
        	rv.setId(role.getId());
        	rv.setRole(role.getRole());
        	rv.setCreatedAt(role.getCreatedAt());
        	rv.setCreatedBy(role.getCreatedBy());
        	rv.setDescription(role.getDescription());
        	
        	target.getSharedWithRoles().add(rv);
        }
        // WARNING! No conversion for target.sharedWithUsers (can't convert source.getSharedWithUsers():bw.co.roguesystems.rofile.user.User to bw.co.roguesystems.rofile.user.vo.UserVO
        target.setSharedWithUsers(new ArrayList<UserDetailsVO>());
        for(User user : source.getSharedWithUsers())
        {
        	UserDetailsVO userVO = new UserDetailsVO();
        	userVO.setId(user.getId());
        	userVO.setCreatedAt(user.getCreatedAt());
        	userVO.setCreatedBy(user.getCreatedBy());
        	userVO.setUsername(user.getSurname());
        	userVO.setSurname(user.getUsername());
        	target.getSharedWithUsers().add(userVO);
        }        
        
        // WARNING! No conversion for target.regions (can't convert source.getRegions():bw.co.roguesystems.rofile.rfile.Region to bw.co.roguesystems.rofile.rfile.vo.RegionVO
        Hibernate.initialize(source.getRegions());
        target.setRegions(getRegionDao().toRegionVOCollection(source.getRegions()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RFileVO toRFileVO(final RFile entity)
    {
        return super.toRFileVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private RFile loadRFileFromRFileVO(RFileVO rFileVO)
    {
        RFile file = RFile.Factory.newInstance();
        
        if(rFileVO != null && rFileVO.getId() != null)
        {
        	file = this.load(rFileVO.getId());
        }
        
        return file;
    }

    /**
     * {@inheritDoc}
     */
    public RFile rFileVOToEntity(RFileVO rFileVO)
    {
        RFile entity = this.loadRFileFromRFileVO(rFileVO);
        this.rFileVOToEntity(rFileVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void rFileVOToEntity(
        RFileVO source,
        RFile target,
        boolean copyIfNull)
    {
        super.rFileVOToEntity(source, target, copyIfNull);
        target.setOwner(getUserDao().load(source.getOwner().getId()));
        
        if(source.getParent() != null && source.getParent().getId() != null)
        {
        	target.setParent(this.load(source.getParent().getId()));
        }
        
        target.setSharedWithRoles(new ArrayList<Role>());
        for(RoleVO roleVO : source.getSharedWithRoles())
        {
        	target.getSharedWithRoles().add(getRoleDao().load(roleVO.getId()));
        }
        
        target.setSharedWithUsers(new ArrayList<User>());
        for(UserDetailsVO userVO : source.getSharedWithUsers())
        {
        	target.getSharedWithUsers().add(getUserDao().load(userVO.getId()));
        }
        
        target.setRegions(new ArrayList<Region>());
        for(RegionVO regionVO : source.getRegions())
        {
        	target.getRegions().add(getRegionDao().load(regionVO.getId()));
        }
    }
}